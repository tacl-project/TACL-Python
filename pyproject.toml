[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tacl"
version = "0.1.0"
description = "TypeSafe Application Configuration Language - Python library for parsing and compiling TACL files"
authors = [{name = "TACL Team"}]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.13"
dependencies = [
    "PyYAML>=6.0",
]
keywords = ["configuration", "config", "tacl", "yaml", "json", "toml", "type-safe"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Compilers",
    "Topic :: File Formats",
    "Topic :: Utilities",
]

[project.urls]
Homepage = "https://github.com/tacl-lang/tacl-python"
Documentation = "https://github.com/tacl-lang/tacl-python#readme"
Repository = "https://github.com/tacl-lang/tacl-python"
Issues = "https://github.com/tacl-lang/tacl-python/issues"

[project.optional-dependencies]
dev = [
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "bandit>=1.7.0",
    "safety>=3.0.0",
    "vulture>=2.11",
    "pyupgrade>=3.15.0",
]
cli = [
    "typer>=0.9.0",
]

[project.scripts]
tacl = "tacl.cli:main"

[tool.hatchling.build.targets.wheel]
packages = ["src/tacl"]

[tool.black]
line-length = 88
target-version = ['py313']
skip-string-normalization = true
exclude = '''
/(
    \.venv
  | \.git
  | __pycache__
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
)/
'''

[tool.isort]
line_length = 88
combine_as_imports = true
force_sort_within_sections = true
skip = [".venv", ".git", "__pycache__", ".mypy_cache", ".pytest_cache", ".ruff_cache"]
profile = "black"

[tool.ruff]
line-length = 88
target-version = "py313"
exclude = [
    ".venv",
    ".git", 
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
]
show-fixes = true

[tool.ruff.lint]
# Enable ALL possible linting rules for maximum strictness
select = [
    "A",    # flake8-builtins
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",    # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",   # flake8-comprehensions
    "C90",  # mccabe complexity
    "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "D",    # pydocstyle
    "DJ",   # flake8-django
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "EM",   # flake8-errmsg
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",    # Pyflakes
    "FA",   # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "FURB", # refurb
    "G",    # flake8-logging-format
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "NPY",  # NumPy-specific rules
    "PD",   # pandas-vet
    "PERF", # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # Pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",   # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]

# Only ignore rules that are genuinely incompatible with our bulletproof style
ignore = [
    "E501",   # line too long â€” handled by Black
    "D100",   # Missing docstring in public module (we have module docstring)
    "D104",   # Missing docstring in public package
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "COM812", # Trailing comma missing (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with formatter)
    "FBT002", # Boolean default value in function definition (we use explicit bools)
    "FBT003", # Boolean positional value in function call (our explicit style)
    "PLR0913", # Too many arguments (our explicit validation needs them)
    "PLR2004", # Magic value used in comparison (we use explicit comparisons)
    "SIM118", # Use dict.get() instead of conditional assignment (we want explicit)
    "TRY003", # Avoid specifying long messages outside exception class (we want detailed errors)
    "EM101",  # Exception must not use a string literal (we want explicit error messages)
    "EM102",  # Exception must not use an f-string literal (we want formatted errors)
    "UP007",  # Use X | Y for type unions (we target Python 3.13, but keeping compatibility)
    "T201",   # Print statements are allowed in CLI tools
    "PTH123", # open() is fine for this simple CLI tool
    "BLE001", # Catching Exception is intentional for CLI error handling
    "C901",   # Complex functions are needed for comprehensive parsing/validation
    "PLR0911", # Multiple returns needed for type parsing logic
    "PLR0912", # Multiple branches needed for type validation logic  
    "PLR0915", # Many statements needed for comprehensive type parsing
    "S101",   # Asserts are appropriate after type checking in this context
]

# Increase complexity threshold for our explicit validation logic
[tool.ruff.lint.mccabe]
max-complexity = 15

# Ban single-letter variable names (personal preference for readability)
[tool.ruff.lint.pep8-naming]
ignore-names = []  # No exceptions - ban ALL single letter vars

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["TACLType", "TACLField", "TACLReference"]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
strict = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_any_expr = false  # We use 'object' which mypy sees as Any
disallow_any_decorated = true
disallow_any_explicit = false  # We explicitly use object
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_reexport = true
strict_concatenate = true
show_error_codes = true
show_column_numbers = true
pretty = true

[tool.bandit]
exclude_dirs = [".venv", ".git", "__pycache__", ".mypy_cache", ".pytest_cache", ".ruff_cache"]
skips = []  # No skips - catch everything
targets = ["."]

[tool.bandit.assert_used]
skips = ["*test*", "*_test.py"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/tacl",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/tacl"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.vulture]
min_confidence = 100
paths = ["src"]
exclude = [".venv/", ".git/", "__pycache__/", ".mypy_cache/", ".pytest_cache/", ".ruff_cache/"]
ignore_decorators = ["@dataclass"]
ignore_names = ["__post_init__"]